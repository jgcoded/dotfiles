events {
        worker_connections 768;
        # multi_accept on;
}

http {
    include        /etc/nginx/proxy.conf;
    limit_req_zone $binary_remote_addr zone=one:10m rate=10r/s;
    server_tokens  off;

    sendfile on;
    # Adjust keepalive_timeout to the lowest possible value that makes sense 
    # for your use case.
    keepalive_timeout   60;
    client_body_timeout 10;
    client_header_timeout 10;
    send_timeout 10;

    upstream rooms{
        server 127.0.0.1:5000;
    }

    server {
        # http2 causes a client side behavior where
        # the SSE EventSource is not considered in an
        # open state until 10-30 seconds have passed.
        # Use http 1.1 for now, and in the future
        # consider separating out the SSE server endpoint
        # from the rest of the APIs. That way the APIs
        # can continue to use http2 and the SSE endpoint
        # can still operate in realtime. In the future
        # SSE will be replaced with fetch() streaming
        # on the client side so use that instead.
        # See: https://github.com/whatwg/html/issues/2177
        listen                    443 ssl;
        listen                    [::]:443 ssl;
        server_name               api.p2p.foo.com;
        ssl_certificate           /etc/letsencrypt/live/p2p.foo.com/fullchain.pem;
        ssl_certificate_key       /etc/letsencrypt/live/p2p.foo.com/privkey.pem;
        ssl_session_timeout       1d;
        ssl_protocols             TLSv1.2 TLSv1.3;
        ssl_prefer_server_ciphers off;
        ssl_ciphers               ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
        ssl_session_cache         shared:SSL:10m;
        ssl_session_tickets       off;
        ssl_stapling              off;

        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;

        #Redirects all traffic
        location / {
            proxy_pass http://rooms;
            limit_req  zone=one burst=10 nodelay;
        }
    }

    server {
        listen                    443 default_server ssl;
        listen                    [::]:443 default_server ssl;
        ssl_certificate           /etc/letsencrypt/live/p2p.foo.com/fullchain.pem;
        ssl_certificate_key       /etc/letsencrypt/live/p2p.foo.com/privkey.pem;
        return 444;
    }
}
